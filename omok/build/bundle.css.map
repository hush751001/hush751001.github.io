{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\texport let name;\n\n\tconst BLOCK_SIZE = 26;\n\tconst CIRCLE_SIZE = 26 / 1.3;\n\tconst BORDER_SIZE = 20;\n\tconst COLS_COUNT = 19;\n\tlet turn = '흑돌';\n\tlet board = [];\n\tlet lastDoings = [];\n\n\tconst BOARD_SIZE = BORDER_SIZE + (BLOCK_SIZE * (COLS_COUNT - 1)) + BORDER_SIZE;\n\n\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\tconst canvas = document.getElementById('canvas_omok');\n\t\tcanvas.setAttribute('width', BOARD_SIZE);\n\t\tcanvas.setAttribute('height', BOARD_SIZE);\n\n\t\tclearBoard();\n\n\t\tcanvas.addEventListener('click', (e) => {\n\t\t\tconst ratio = e.target.clientHeight / BOARD_SIZE;\n\t\t\tconst x = Math.round((e.offsetX / ratio) / BLOCK_SIZE) - 1;\n\t\t\tconst y = Math.round((e.offsetY / ratio) / BLOCK_SIZE) - 1;\n\n\t\t\tif (board[x][y] === '없음') {\n\t\t\t\tboard[x][y] = turn;\n\t\t\t\t// 마지막 수 저장\n\t\t\t\tlastDoings.push({ x, y });\n\t\t\t\tdrawCircle(x, y, turn);\n\t\t\t\tconst winner = checkWinner(x, y, turn);\n\t\t\t\tif (winner) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\talert(winner + ' 승!!!!!');\n\t\t\t\t\t\tclearBoard();\n\t\t\t\t\t}, 100);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttoggleTurn();\n\t\t\t}\n\t\t});\n\n\t\tconst backButton = document.getElementById('back');\n\t\tbackButton.addEventListener('click', () => {\n\t\t\tif (lastDoings.length > 0) {\n\t\t\t\ttoggleTurn();\n\t\t\t\tconst lastDo = lastDoings.pop();\n\t\t\t\tboard[lastDo.x][lastDo.y] = '없음';\n\t\t\t\tdrawBoard();\n\t\t\t\tdrawCircles();\n\t\t\t}\n\t\t});\n\t});\n\n\tfunction toggleTurn() {\n\t\tif (turn === '백돌') {\n\t\t\tturn = '흑돌';\n\t\t} else {\n\t\t\tturn = '백돌';\n\t\t}\n\t}\n\n\tfunction drawBoard() {\n\t\tconst canvas = document.getElementById('canvas_omok');\n\t\tconst ctx = canvas.getContext('2d');\n\t\tctx.fillStyle = '#e8a755';\n\t\tctx.fillRect (0, 0, BOARD_SIZE, BOARD_SIZE);\n\n\t\tctx.strokeStyle = '#000000';\n\t\tctx.beginPath();\n\t\tfor (let i = 0; i < COLS_COUNT; i++) {\n\t\t\tctx.moveTo(BORDER_SIZE + (BLOCK_SIZE * i), BORDER_SIZE);\n\t\t\tctx.lineTo(BORDER_SIZE + (BLOCK_SIZE * i), BORDER_SIZE + (BLOCK_SIZE * (COLS_COUNT-1)));\n\t\t\tctx.moveTo(BORDER_SIZE, BORDER_SIZE + (BLOCK_SIZE * i));\n\t\t\tctx.lineTo(BORDER_SIZE + (BLOCK_SIZE * (COLS_COUNT-1)), BORDER_SIZE + (BLOCK_SIZE * i));\n\t\t}\n\t\t\n\t\tctx.stroke();\n\t}\n\n\tfunction drawCircles() {\n\t\tfor (let x = 0; x < COLS_COUNT; x++) {\n\t\t\tfor (let y = 0; y < COLS_COUNT; y++) {\n\t\t\t\tif (board[x][y] !== '없음') {\n\t\t\t\t\tdrawCircle(x, y, board[x][y]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction clearBoard() {\n\t\tturn = '흑돌';\n\t\tlastDoings = [];\n\t\tboard = [];\n\t\tfor (let x = 0; x < COLS_COUNT; x++) {\n\t\t\tfor (let y = 0; y < COLS_COUNT; y++) {\n\t\t\t\tboard[x] = board[x] || [];\n\t\t\t\tboard[x][y] = '없음';\n\t\t\t}\n\t\t}\n\n\t\tdrawBoard();\n\t}\n\n\tfunction drawCircle(x, y, turn) {\n\t\tconst canvas = document.getElementById('canvas_omok');\n\t\tconst ctx = canvas.getContext('2d');\n\t\tif (turn === '흑돌') {\n\t\t\tctx.fillStyle = '#000000';\n\t\t} else {\n\t\t\tctx.fillStyle = '#ffffff';\n\t\t}\n\t\tctx.beginPath();\n\t\tctx.arc(BORDER_SIZE + (BLOCK_SIZE * x), BORDER_SIZE + (BLOCK_SIZE * y), CIRCLE_SIZE/2, 0, Math.PI * 2, true);\n\t\tctx.fill();\n\t}\n\n\n\tfunction findHorizontalStartIndex(x, y, turn) {\n\t\tlet i;\n\t\tfor(i = 1; i < 5; i++) {\n\t\t\tif ((x - i) < 0) { break; }\n\t\t\tif (board[x - i][y] !== turn) { break; }\n\t\t}\n\t\treturn {\n\t\t\tstartXIndex: x - (i - 1),\n\t\t\tstartYIndex: y\n\t\t}\n\t}\n\tfunction findVertialStartIndex(x, y, turn) {\n\t\tlet i;\n\t\tfor(i = 1; i < 5; i++) {\n\t\t\tif ((y - i) < 0) { break; }\n\t\t\tif (board[x][y - i] !== turn) { break; }\n\t\t}\n\t\treturn {\n\t\t\tstartXIndex: x,\n\t\t\tstartYIndex: y - (i - 1)\n\t\t}\n\t}\n\tfunction findStartDiagonalIndex(x, y, turn) {\n\t\tlet i;\n\t\tfor(i = 1; i < 5; i++) {\n\t\t\tif ((y - i) < 0) { break; }\n\t\t\tif ((x - i) < 0) { break; }\n\t\t\tif (board[x - i][y - i] !== turn) { break; }\n\t\t}\n\t\treturn {\n\t\t\tstartXIndex: x - (i - 1),\n\t\t\tstartYIndex: y - (i - 1)\n\t\t};\n\t}\n\tfunction findStartSkewDiagonalIndex(x, y, turn) {\n\t\tlet i;\n\t\tfor(i = 1; i < 5; i++) {\n\t\t\tif ((y + i) >= COLS_COUNT) { break; }\n\t\t\tif ((x - i) < 0) { break; }\n\t\t\tif (board[x - i][y + i] !== turn) { break; }\n\t\t}\n\t\treturn {\n\t\t\tstartXIndex: x - (i - 1),\n\t\t\tstartYIndex: y + (i - 1)\n\t\t};\n\t}\n\n\n\tfunction checkHorizontalConsecutive(x, y, turn) {\n\t\tlet { startXIndex } = findHorizontalStartIndex(x, y, turn);\n\t\tlet i;\n\t\tfor (i = 0; i < 5; i++) {\n\t\t\tif((startXIndex + i) >= COLS_COUNT) { break; }\n\t\t\tif (board[startXIndex + i][y] !== turn) { break; }\n\t\t}\n\t\treturn (i === 5);\n\t}\n\n\tfunction checkVerticalConsecutive(x, y, turn) {\n\t\tlet { startYIndex } = findVertialStartIndex(x, y, turn);\n\t\tlet i;\n\t\tfor (i = 0; i < 5; i++) {\n\t\t\tif((startYIndex + i) >= COLS_COUNT) { break; }\n\t\t\tif (board[x][startYIndex + i] !== turn) { break; }\n\t\t}\n\t\treturn (i === 5);\n\t}\n\n\tfunction checkDiagonalConsecutive(x, y, turn) {\n\t\tlet { startXIndex, startYIndex } = findStartDiagonalIndex(x, y, turn);\n\t\tlet i;\n\t\tfor (i = 0; i < 5; i++) {\n\t\t\tif((startXIndex + i) >= COLS_COUNT) { break; }\n\t\t\tif((startYIndex + i) >= COLS_COUNT) { break; }\n\t\t\tif (board[startXIndex + i][startYIndex + i] !== turn) { break; }\n\t\t}\n\t\treturn (i === 5);\n\t}\n\n\tfunction checkSkewDiagonalConsecutive(x, y, turn) {\n\t\tlet { startXIndex, startYIndex } = findStartSkewDiagonalIndex(x, y, turn);\n\t\tlet i;\n\t\tfor (i = 0; i < 5; i++) {\n\t\t\tif((startXIndex + i) >= COLS_COUNT) { break; }\n\t\t\tif((startYIndex - i) < 0) { break; }\n\t\t\tif (board[startXIndex + i][startYIndex - i] !== turn) { break;}\n\t\t}\n\t\treturn (i === 5);\n\t}\n\n\tfunction checkWinner(x, y, turn) {\n\t\t// 1. - 축 확인\n\t\tif (checkHorizontalConsecutive(x, y, turn)) {\n\t\t\treturn turn;\n\t\t}\n\n\t\t// 2. | 축 확인\n\t\tif (checkVerticalConsecutive(x, y, turn)) {\n\t\t\treturn turn;\n\t\t}\n\n\t\t// 3. \\ 확인\n\t\tif (checkDiagonalConsecutive(x, y, turn)) {\n\t\t\treturn turn;\n\t\t}\n\n\t\t// 4. / 확인\n\t\tif (checkSkewDiagonalConsecutive(x, y, turn)) {\n\t\t\treturn turn;\n\t\t}\n\n\t\treturn false;\n\t}\n\n</script>\n\n<main>\n\t<h1>Hello {name}!</h1><button id=\"back\">한수 뒤로</button>\n\t<div style=\"width:100vw; height: 100vw\">\n\t\t<canvas id=\"canvas_omok\"></canvas>\n\t</div>\n</main>\n\n<style>\n\t#canvas_omok {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t#back {\n\t\tmargin-left: 10px;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 1.3em;\n\t\tfont-weight: 100;\n\t\tmargin-left: 10px;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAkPC,YAAY,cAAC,CAAC,AACb,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC,AAED,KAAK,cAAC,CAAC,AACN,WAAW,CAAE,IAAI,AAClB,CAAC,AAED,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,IAAI,AAClB,CAAC"
}